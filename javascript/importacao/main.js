// ===== arquivo main.js =====

// Importamos fun√ß√µes espec√≠ficas do arquivo utils.js
// O caminho './utils.js' significa que est√° na mesma pasta
import { gets, print } from './utils.js';

// Agora podemos usar essas fun√ß√µes
const nome1 = gets(); // L√™ o primeiro nome
const nome2 = gets(); // L√™ o segundo nome

// Exibe os nomes
print("Primeiro nome: " + nome1);
print("Segundo nome: " + nome2);


// Importa usando require (CommonJS)
const { gets, print } = require('./funcoes-auxiliares');

print(gets()); // Vai imprimir "10"


/*
====================================================
üì¶ SISTEMAS DE M√ìDULOS EM JAVASCRIPT
====================================================

1Ô∏è‚É£ CommonJS (require / module.exports)
----------------------------------------------------
- Sistema de m√≥dulos usado nativamente no Node.js.
- Sintaxe:
    const modulo = require('./arquivo');
    module.exports = { funcao1, funcao2 };
- Carregamento s√≠ncrono.
- Funciona direto no Node.js sem configura√ß√µes extras.
- N√£o √© o padr√£o oficial do JavaScript.
- N√£o funciona no navegador sem ferramentas como Webpack ou Parcel.
- Muito usado em projetos antigos e scripts Node.js.

2Ô∏è‚É£ ES Modules (import / export)
----------------------------------------------------
- Padr√£o oficial do JavaScript desde ES6 (2015).
- Sintaxe:
    import { funcao1 } from './arquivo.js';
    export function funcao1() { ... }
- Carregamento ass√≠ncrono no navegador.
- Funciona no navegador com <script type="module">.
- Funciona no Node.js se ativar suporte:
    ‚Üí No package.json: "type": "module"
    ‚Üí Ou usar arquivos com extens√£o .mjs
- Melhor op√ß√£o para novos projetos, especialmente front-end
  e aplica√ß√µes que rodam tanto no navegador quanto no Node.js.

üèÜ Resumo final:
- Se for c√≥digo apenas para Node.js e quer simplicidade ‚Üí CommonJS.
- Se for projeto moderno, compat√≠vel com navegador e Node.js ‚Üí ES Modules.

====================================================
*/
