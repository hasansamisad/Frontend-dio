// ======================================================
// üìå LISTAS EM JAVASCRIPT (ARRAYS)
// ======================================================
const numeros = [1, 2, 3, 4, 5];

// ------------------------------------------------------
// üìå forEach ‚Üí percorre cada elemento do array
// ------------------------------------------------------
// N√£o retorna um novo array, apenas executa algo para cada item
numeros.forEach((num, indice) => {
  console.log(`√çndice: ${indice} | Valor: ${num}`);
});
// Sa√≠da:
// √çndice: 0 | Valor: 1
// √çndice: 1 | Valor: 2
// √çndice: 2 | Valor: 3
// √çndice: 3 | Valor: 4
// √çndice: 4 | Valor: 5



// ------------------------------------------------------
// üìå map ‚Üí cria um NOVO array transformando os valores
// ------------------------------------------------------
// Retorna um novo array com a transforma√ß√£o aplicada
const dobrados = numeros.map(num => num * 2);
console.log(dobrados); 
// ‚Üí [2, 4, 6, 8, 10]

const numero = [1, 2, 3, 4, 5];

// Multiplicando cada n√∫mero por 2
const dobrado = numero.map((valor) => valor * 2);

console.log("Original:", numero); // ‚Üí [1, 2, 3, 4, 5]
console.log("Dobrados:", dobrado); // ‚Üí [2, 4, 6, 8, 10]




// ------------------------------------------------------
// üìå filter ‚Üí cria um NOVO array filtrando valores
// ------------------------------------------------------
// Retorna apenas os elementos que passarem na condi√ß√£o
const pares = numeros.filter(num => num % 2 === 0);
console.log(pares); 
// ‚Üí [2, 4]



// ------------------------------------------------------
// üìå reduce ‚Üí reduz o array a um √∫nico valor
// ------------------------------------------------------
// Recebe um acumulador e o valor atual em cada itera√ß√£o
const soma = numeros.reduce((acumulador, num) => acumulador + num, 0);
console.log(soma); 
// ‚Üí 15 (1+2+3+4+5)

// Outro exemplo: transformar lista em objeto
const usuarios = ["Ana", "Pedro", "Maria"];
const usuariosObj = usuarios.reduce((acc, nome, index) => {
  acc[index] = nome;
  return acc;
}, {});

console.log(usuariosObj);
// ‚Üí { 0: 'Ana', 1: 'Pedro', 2: 'Maria' }

//----------------------EXEMPLO DE REDUCE-------------------------------- VAi percorrendo a lista ate formar um unico valor

// Criamos uma lista (array) de n√∫meros de 1 at√© 10
const lista = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];

// Usando reduce para somar todos os n√∫meros da lista
const somaDeTodosOsNumeros = lista.reduce((previous, current) => {
  // previous ‚Üí acumulador (valor acumulado at√© agora)
  // current ‚Üí valor atual do array na itera√ß√£o

  console.log(previous, current); 
  // Mostra no console o valor acumulado at√© o momento e o n√∫mero atual

  // Retorna a soma do acumulador com o valor atual
  // Esse valor retornado se torna o "previous" da pr√≥xima itera√ß√£o
  return previous + current;

}, 0); 
// O "0" no final √© o valor inicial do acumulador (previous come√ßa em 0)

// Exibindo o resultado final ap√≥s todas as somas
console.log("Resultado final:", somaDeTodosOsNumeros);

